
    int lightX; // the X position of the light of power
    int lightY; // the Y position of the light of power

    int initialTX; // Thor's starting X position
    int initialTY; // Thor's starting Y position

    int actualPositionX;
    int actualPositionY;

    cin >> lightX >> lightY >> initialTX >> initialTY; cin.ignore();

    actualPositionX = initialTX;
    actualPositionY = initialTY;

    // game loop
    while (1) {
        int remainingTurns; // The remaining amount of turns Thor can move. Do not remove this line.

        cin >> remainingTurns; cin.ignore();

        // Write an action using cout. DON'T FORGET THE "<< endl"
        // To debug: cerr << "Debug messages..." << endl;
        if (actualPositionY > lightY)
        {
            if (actualPositionX > lightX)
            {
                cout << "NW" << endl;
                actualPositionX -= 1;
                actualPositionY -= 1;
            }
            else if (actualPositionX < lightX)
            {
                cout << "NE" << endl;    
                actualPositionX += 1;   
                actualPositionY -= 1;         
            }
            else if (actualPositionX == lightX)
            {
                cout << "N" << endl; 
                actualPositionY -= 1;
            }
        }
        else if (actualPositionY == lightY)
        {
            if (actualPositionX > lightX)
            {
                cout << "W" << endl;  
                actualPositionX -= 1;  
            }
            else if (actualPositionX < lightX)
            {
                cout << "E" << endl;  
                actualPositionX += 1;                  
            }
        }
        else if (actualPositionY < lightY)
        {
            if (actualPositionX > lightX)
            {
                cout << "SW" << endl;  
                actualPositionX -= 1;  
                actualPositionY += 1;
            }
            else if (actualPositionX < lightX)
            {
                cout << "SE" << endl;   
                actualPositionX += 1;   
                actualPositionY += 1;              
            }
            else if (actualPositionX == lightX)
            {
                cout << "S" << endl; 
                actualPositionY += 1;
            }
        }
    }






int compare(int a, int b) { return (a > b) - (a < b); }

map<int, string>
DIR_X {{-1, "W"}, {0, ""}, {1, "E"}},
DIR_Y {{-1, "N"}, {0, ""}, {1, "S"}};

int main()
{
    struct { int x, y; } light, Thor;
    cin >> light.x >> light.y >> Thor.x >> Thor.y; cin.ignore();

    while (1) {
        int remainingTurns;
        cin >> remainingTurns; cin.ignore();
        
        int dx = compare(light.x, Thor.x);
        int dy = compare(light.y, Thor.y);
        Thor.x += dx;
        Thor.y += dy;
        
        cout << DIR_Y[dy] << DIR_X[dx] << endl;
    }
}
